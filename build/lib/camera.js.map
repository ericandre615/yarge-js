{"version":3,"file":"camera.js","sourceRoot":"","sources":["../../src/lib/camera.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,kBAAkB,CAAC;AAgCnC,IAAM,YAAY,GAAG,UAAC,KAAW,EAAE,MAAW,EAAE,IAAc;IAAxC,sBAAA,EAAA,WAAW;IAAe,qBAAA,EAAA,cAAc;IAC5D,IAAM,KAAK,GAAgB;QACzB,KAAK,OAAA;QACL,MAAM,QAAA;QACN,IAAI,MAAA;QACJ,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QACpB,UAAU,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,CAAY;QACvE,IAAI,EAAE,GAAG,CAAC,QAAQ,EAAa;KAChC,CAAC;IAEF,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,GAAG,CAAY,CAAC;IAEnE,IAAM,WAAW,GAAG,UAAC,CAAK,EAAE,CAAK,EAAE,CAAK;QAAnB,kBAAA,EAAA,KAAK;QAAE,kBAAA,EAAA,KAAK;QAAE,kBAAA,EAAA,KAAK;QACtC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtB,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAY,CAAC;IACrE,CAAC,CAAC;IAEF,IAAM,cAAc,GAAG,UAAC,CAAS,EAAE,CAAQ;QACzC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;QAChB,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACjB,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,CAAY,CAAC;IACxE,CAAC,CAAC;IAEF,OAAO;QACL,aAAa,EAAE,cAAM,OAAA,KAAK,CAAC,UAAU,EAAhB,CAAgB;QACrC,WAAW,EAAE,cAAM,OAAA,KAAK,CAAC,GAAG,EAAT,CAAS;QAC5B,WAAW,aAAA;QACX,cAAc,gBAAA;QACd,OAAO,EAAE,cAAM,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU;QACzB,QAAQ,EAAE,cAAM,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW;QAC3B,SAAS,EAAE,cAAM,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY;QAC7B,aAAa,EAAE,cAAM,OAAA,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EAA3B,CAA2B;QAChD,iBAAiB,EAAE,cAAM,OAAA,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAY,EAArD,CAAqD;KAC/E,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import glm from '../vendor/glm.js';\n\ntype Matrix4 = [\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number,\n]\n\ntype Position = [number, number, number];\n\nexport interface Camera {\n  getProjection: () => Matrix4,\n  getPosition: () => Position,\n  setPosition: (x: number, y: number, z: number) => void,\n  updateViewport: (w: number, h: number) => void,\n  getView: () => Matrix4,\n  getWidth: () => number,\n  getHeight: () => number,\n  getDimensions: () => [number, number],\n  getViewProjection: () => Matrix4,\n}\n\ntype CameraProps = {\n  width: number,\n  height: number,\n  kind: string,\n  pos: Position,\n  projection: Matrix4,\n  view: Matrix4,\n}\n\nconst createCamera = (width = 0.0, height: 0.0, kind = 'ortho'): Camera => {\n  const props: CameraProps = {\n    width,\n    height,\n    kind,\n    pos: [0.0, 0.0, 0.0],\n    projection: glm.ortho(0.0, width, height, 0.0, -10.0, 100.0) as Matrix4,\n    view: glm.identity() as Matrix4,\n  };\n\n  props.view = glm.translation(glm.identity(), props.pos) as Matrix4;\n\n  const setPosition = (x = 0, y = 0, z = 0) => {\n    props.pos = [x, y, z];\n    props.view = glm.translation(glm.identity(), [x, y, z]) as Matrix4;\n  };\n\n  const updateViewport = (w: number, h:number) => {\n    props.width = w;\n    props.height = h;\n    props.projection = glm.ortho(0.0, w, h, 0.0, -10.0, 100.0) as Matrix4;\n  };\n\n  return {\n    getProjection: () => props.projection,\n    getPosition: () => props.pos,\n    setPosition,\n    updateViewport,\n    getView: () => props.view,\n    getWidth: () => props.width,\n    getHeight: () => props.height,\n    getDimensions: () => [props.width, props.height],\n    getViewProjection: () => glm.multMat4(props.projection, props.view) as Matrix4,\n  };\n};\n\nexport default createCamera;\n\n"]}