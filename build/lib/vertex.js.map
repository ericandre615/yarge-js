{"version":3,"file":"vertex.js","sourceRoot":"","sources":["../../src/lib/vertex.js"],"names":[],"mappings":"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","sourcesContent":["const duckType = t => Object.prototype.toString.call(t);\nconst isString = v => (\n  duckType(v) == '[object String]' && isNaN(v)\n);\nconst isNumber = v => (\n  duckType(v) == '[object Number]' && !isNaN(v)\n);\nconst byteSize = 4; // float32 byte size\n\nconst getSizeInBytes = data => (data.length * data.BYTES_PER_ELEMENT);\n\nexport const vertex = gl => (vertexData) => {\n  const data = new Float32Array(\n    Object.keys(vertexData).reduce((acc, curr) => acc.concat(...vertexData[curr]), [])\n  );\n\n  return {\n    data,\n    sizeInBytes: getSizeInBytes(data),\n    vertexAttribPointers: (program) => {\n      return Object.keys(vertexData).forEach((attribute, i, attrs) => {\n        const attrData = new Float32Array(vertexData[attribute]);\n        const attr = isNumber(parseInt(attribute, 10))\n          ? attribute\n          : program.getAttribLocation(attribute);\n        const normalized = false;\n        const stride = getSizeInBytes(data);\n        const offset = i == 0\n          ? 0\n          : vertexData[attrs[i - 1]].length * byteSize || 0;// the previous element's data length\n\n        gl.enableVertexAttribArray(attr);\n        gl.vertexAttribPointer(attr, attrData.length, gl.FLOAT, normalized, stride, offset);\n      });\n    },\n  }\n};\n\nexport const vertexArray = vertices => ({\n  data: new Float32Array(vertices.reduce((acc, { data }) => acc.concat(...data), [])),\n  sizeInBytes: vertices[0].sizeInBytes,\n  vertexAttribPointers: vertices[0].vertexAttribPointers,\n});\n\nexport default {\n  vertex,\n  vertexArray\n};\n\n"]}